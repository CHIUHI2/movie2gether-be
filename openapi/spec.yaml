openapi: 3.0.0
info:
  description: |
    This is a sample Petstore server.  You can find
    out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: "1.0.0"
  title: Movie2gether
  termsOfService: 'http://swagger.io/terms/'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/alex0acw/oocl-tatp/1.0.0
  - url: 'https://petstore.swagger.io/v2'
tags:
  - name: Movie
    description: Movie details.
  - name: User
    description: User information.
  - name: Booking
    description: Booking and Payment API.
  - name: Static
    description: Static files.
paths:
  /movie:
    get:
      tags:
        - "Movie"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
  /movie/{id}/comments:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "Movie"
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieComments'

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        friends:
          type: array
          items:
            $ref: '#/components/schemas/User'
        bookings:
          type: array
          items:
            $ref: '#/components/schemas/Booking'
    Movie:
      type: object
      properties:
        name:
          type: string
        category:
          type: array
          items:
            type: string
        rating:
          type: number
    MovieComments:
      type: array
      items:
        $ref: '#/components/schemas/Comment'
    Comment:
      type: object
      properties:
        author:
          type: string
        content:
          type: string
        rating:
          type: integer
    Booking:
      type: object
      properties:
        userId:
          type: string
        sessionId:
          type: string
        seatId:
          type: string
    Session:
      type: object
      properties:
        movie:
          $ref: '#/components/schemas/Movie'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        bookings:
          type: array
          items:
            $ref: '#/components/schemas/Booking'
    Cinema:
      type: object
      properties:
        address:
          type: string
        name:
          type: string
        seats:
          type: array
          items:
            $ref: '#/components/schemas/Seat'
    Seat:
      type: object
      properties:
        number:
          type: string
        x:
          type: number
          description: "lateral distance from screen"
        y:
          type: number
          description: "perpendicular distance from screen"
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: Details for new user registration
      required: true